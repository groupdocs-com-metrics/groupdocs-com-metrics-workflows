# This is a basic workflow to help you get started with Actions

name: metrics.groupdocs.com-qa

# Controls when the action will run. 
on:
  workflow_dispatch:
  # Scheduled trigger
  schedule:
    - cron: '55 */3 * * *'
  
  #push:
   # branches: [ main ]
    #paths: [ 'content/aspose-com-v2/**' ]
  #pull_request:
  #  branches: [ main1 ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
        with:
            repository: groupdocs-com-metrics/groupdocs-com-metrics
            token: ${{ secrets.REPO_TOKEN }}
            ref: main
            submodules: true  # Fetch Hugo themes
            fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

       # Step 2: Set up Node.js to run the fetch script
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
            node-version: '18'  # Use Node.js version 14 (or other versions as needed)

      # Step 3: Install Node.js dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Fetch JSON data and save it to Hugo's data folder
      - name: Fetch JSON data
        run: npm run fetch-data
      
      # Step 5 - Sets up the latest version of Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
            hugo-version: '0.110.0'
            
      # Also specifies the theme we want to use
      - name: Build
        run: hugo --config "./config/groupdocs-com-qa.toml" --minify
        
      - name: Deploy qa-metrics.groupdocs.com
        run: hugo --config "./config/groupdocs-com-qa.toml" deploy --target "Staging" --invalidateCDN --maxDeletes 256 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS }}
   